import cv2
import numpy as np

# ---------- Step 1: Condition for splitting ----------
def is_homogeneous(region, threshold=15):
    """Check if the region is homogeneous (low variance)."""
    if region.size == 0:
        return True
    return np.std(region) < threshold

# ---------- Step 2: Recursive splitting ----------
def split(image, x, y, w, h, threshold):
    region = image[y:y+h, x:x+w]
    
    if not is_homogeneous(region, threshold) and w > 1 and h > 1:
        w2, h2 = w // 2, h // 2
        return [
            split(image, x,     y,     w2, h2, threshold),
            split(image, x+w2,  y,     w2, h2, threshold),
            split(image, x,     y+h2,  w2, h2, threshold),
            split(image, x+w2,  y+h2,  w2, h2, threshold)
        ]
    else:
        mean_val = int(np.mean(region))
        return [(x, y, w, h, mean_val)]

# ---------- Step 3: Flatten nested list ----------
def flatten(regions):
    flat = []
    for r in regions:
        if isinstance(r, list):
            flat.extend(flatten(r))
        else:
            flat.append(r)
    return flat

# ---------- Step 4: Region Merge (simple merge of adjacent regions) ----------
def merge(regions, image, threshold=15):
    merged = np.zeros_like(image)
    for (x, y, w, h, val) in regions:
        merged[y:y+h, x:x+w] = val
    return merged

# ===================== DEMO =====================
# Load grayscale image
img = cv2.imread("test_image.png", cv2.IMREAD_GRAYSCALE)

# Region Split
regions = split(img, 0, 0, img.shape[1], img.shape[0], threshold=20)
regions = flatten(regions)

# Merge step
merged_img = merge(regions, img)

# Show results
cv2.imshow("Original", img)
cv2.imshow("Region Split & Merge", merged_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
