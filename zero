import numpy as np
import matplotlib.pyplot as plt

# Original continuous-like signal (we simulate it with high resolution)
t = np.linspace(0, 1, 1000)  # fine sampling
x = np.sin(2 * np.pi * 5 * t)  # example signal: sine wave

# Downsample (simulate discrete sampled signal)
Ts = 0.1  # sampling interval
n = np.arange(0, 1+Ts, Ts)
x_sampled = np.sin(2 * np.pi * 5 * n)

# Zero Order Hold (piecewise constant interpolation)
def zero_order_hold(n, x, t):
    x_zoh = np.zeros_like(t)
    for i in range(len(n)-1):
        x_zoh[(t >= n[i]) & (t < n[i+1])] = x[i]
    x_zoh[t >= n[-1]] = x[-1]  # last value hold
    return x_zoh

# First Order Hold (linear interpolation)
def first_order_hold(n, x, t):
    x_foh = np.zeros_like(t)
    for i in range(len(n)-1):
        slope = (x[i+1] - x[i]) / (n[i+1] - n[i])
        x_foh[(t >= n[i]) & (t < n[i+1])] = x[i] + slope * (t[(t >= n[i]) & (t < n[i+1])] - n[i])
    x_foh[t >= n[-1]] = x[-1]
    return x_foh

# Apply ZOH and FOH
x_zoh = zero_order_hold(n, x_sampled, t)
x_foh = first_order_hold(n, x_sampled, t)

# Plot results
plt.figure(figsize=(12,6))

plt.plot(t, x, 'k--', label="Original Signal (reference)")
plt.stem(n, x_sampled, linefmt='r-', markerfmt='ro', basefmt=' ', label="Sampled Signal")

plt.plot(t, x_zoh, 'b', label="Zero Order Hold")
plt.plot(t, x_foh, 'g', label="First Order Hold")

plt.legend()
plt.title("Zero Order Hold (ZOH) vs First Order Hold (FOH)")
plt.xlabel("Time")
plt.ylabel("Amplitude")
plt.grid(True)
plt.show()
